//
// BASE MIXINS
// --------------------------------------------------

// Links
// ------------------
@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {
    color: $normal;
    @if $visited {
        &:visited {
            color: $visited;
        }
    }
    @if $focus {
        &:focus {
            color: $focus;
        }
    }
    @if $hover {
        &:hover {
            color: $hover;
        }
    }
    @if $active {
        &:active {
            color: $active;
        }
    }
}

// Images
// ------------------

@mixin img-circle($img-size) {
    @include border-radius(unquote($img-size/2 + px));
    width: unquote($img-size + px);
    height: unquote($img-size + px);
    @include center-block;
}

// Forms
// ------------------

// Generate Input List
$inputs-list: 'input[type="email"]',
'input[type="number"]',
'input[type="password"]',
'input[type="search"]',
'input[type="tel"]',
'input[type="text"]',
'input[type="url"]',

// Webkit & Gecko may change the display of these in the future
'input[type="color"]',
'input[type="date"]',
'input[type="datetime"]',
'input[type="datetime-local"]',
'input[type="month"]',
'input[type="time"]',
'input[type="week"]';

$unquoted-inputs-list: ();
@each $input-type in $inputs-list {
    $unquoted-inputs-list: append($unquoted-inputs-list, unquote($input-type), comma);
}

$all-text-inputs: $unquoted-inputs-list;


// Hover Pseudo-class
$all-text-inputs-hover: ();
@each $input-type in $unquoted-inputs-list {
    $input-type-hover: $input-type + ":hover";
    $all-text-inputs-hover: append($all-text-inputs-hover, $input-type-hover, comma);
}

// Focus Pseudo-class
$all-text-inputs-focus: ();
@each $input-type in $unquoted-inputs-list {
    $input-type-focus: $input-type + ":focus";
    $all-text-inputs-focus: append($all-text-inputs-focus, $input-type-focus, comma);
}

// Input Sizes
@mixin input-size($size) {
    @if $size == "mini" {
        @include column($columns/$columns);
    }
    @else if $size == "small" {
        @include column($columns/4 - 1);
    }
    @else if $size == "medium" {
        @include column($columns/2);
    }
    @else if $size == "large" {
        @include column($columns/2 + $columns/4);
    }
    @else if $size == "full" {
        display: block;
        width: 100%;
        min-height: $input-height; // Make inputs at least the height of their button counterpart(line-height + padding + border)
        @include box-sizing(border-box); // Makes inputs behave like true block-level elements
    }
}

// Placeholder text
$placeholders: '-webkit-input-placeholder',
               '-moz-placeholder',
               '-ms-input-placeholder';

@mixin placeholder() {
  @each $placeholder in $placeholders {
    @if $placeholder == "-webkit-input-placeholder" {
      &::#{$placeholder} {
        @content;
      }
    }
    @else if $placeholder == "-moz-placeholder" {
      // FF 18-
      &:#{$placeholder} {
        @content;
      }

      // FF 19+
      &::#{$placeholder} {
        @content;
      }
    }
    @else {
      &:#{$placeholder} {
        @content;
      }
    }
  }
}



//
// Buttons
// -------------------------------------------------

// Mixing that gets included when calling the button-structure if you need any
// styles applied to all your sassy buttons, add it here.
@mixin button-default-structure {
    display: inline-block;
    cursor: pointer;
}

// The Sassy Button kitchen sink.
@mixin button($gradient-style: $btn-gradient-style, $border-radius: $btn-border-radius, $font-size: $btn-font-size, $first-color: $btn-base-color, $second-color: $btn-second-color, $text-color: $btn-text-color, $text-style: $btn-text-style, $auto-states: $btn-pseudo-states, $ie: $legacy-support) {
    @include button-structure($border-radius, $font-size, $btn-padding);
    @include button-gradient($gradient-style, $first-color, $second-color, $text-color, $text-style, $auto-states, $ie);
    @include firefox-fix;
}

// Structure for a sassy button
@mixin button-structure($border-radius: $btn-border-radius, $font-size: $btn-font-size, $padding: $btn-padding) {
    font-size: $font-size;
    padding: $padding;
    @include button-default-structure;
    @include border-radius($border-radius);
}

// Fix for the Firefox padding issue
@mixin firefox-fix {
    &::-moz-focus-inner {
        padding: 0 !important;
        margin: -1px !important;
    }
}

// Mixin that controls the text style
@mixin button-text-style($base-color, $second-color, $text-color, $text-style: "inset") {
    $text-lightness: lightness($text-color);
    $text-color-shift: 0;
    $diff: lightness($base-color) - lightness($second-color);
    @if $diff > 40 {
        $text-color-shift: 35 + $diff / 10;
    }
    @else if $diff > 18 {
        $text-color-shift: 30 + $diff / 10;
    }
    @else {
        $text-color-shift: 25 + $diff / 10;
    }
    color: $text-color;
    @if $text-style == "inset" {
        @if $text-lightness < 50 {
            @include text-shadow(lighten($second-color, $text-color-shift / 1.5) 0 1px 0);
        }
        @else {
            @include text-shadow(darken($base-color, $text-color-shift) 0 -1px 0);
        }
    }
    @if $text-style == "raised" {
        @if $text-lightness < 50 {
            @include text-shadow(lighten($second-color, $text-color-shift / 1.5) 0 -1px 0);
        }
        @else {
            @include text-shadow(darken($base-color, $text-color-shift) 0 1px 0);
        }
    }
}

// Mixins for shadows used in buttons
@mixin button-highlight-shadow($base-color) {
    @include box-shadow(lighten($base-color, 15%) 0 1px 0 inset);
}

@mixin button-active-shadow($second-color) {
    @include box-shadow(darken($second-color, 8%) 0 1px 2px inset);
}

// Mixins for gradients used in buttons
@mixin button-gradient($style: $btn-gradient-style, $base-color: $btn-base-color, $second-color: $btn-second-color, $text-color: $btn-text-color, $text-style: $btn-text-style, $auto-states: $btn-pseudo-states, $ie: $legacy-support) {
    $first-color: $base-color;
    $lightness: lightness($base-color);
    $brightness-divsor: 1;
    @if $lightness > 75 {
        $brightness-divsor: 2;
    }
  // user a simple filter gradient if $legacy-support is true
  @if $ie {
    @include filter-gradient($first-color, darken($first-color, 20%));
  }
  @else {
    background-color: $base-color;
  }
  // Matte Gradient Style
  @if $style == "matte" {
    $first-color: $base-color;
    @if $second-color == false {
        $first-color: lighten($base-color, 15%);
        $second-color: $base-color;
    }
    @include background(linear-gradient(color-stops($first-color, $second-color 70%)));
    @include button-highlight-shadow($first-color);
    border: 1px solid darken($second-color, 5%);
    @if $auto-states {
        @include pseudo-states($first-color, $second-color, $style);
    }
  }
  // Shiny Gradient Style
  @if $style == "shiny" {
    $first-color: lighten($base-color, 25% / $brightness-divsor);
    @if $second-color == false {
        $second-color: darken($base-color, 10%);
    }
    @include background(linear-gradient(color-stops($first-color, $base-color 50%, $second-color)));
    @include button-highlight-shadow($first-color);
    border: 1px solid darken($second-color, 5%);
    @if $auto-states {
        @include pseudo-states($first-color, $second-color, $style);
    }
  }
  // Glass Gradient Style
  @if $style == "glass" {
    $first-color: lighten($base-color, 8% / $brightness-divsor);
    @if $second-color == false {
        $second-color: $base-color;
    }
    @include background(linear-gradient(color-stops($first-color 50%, $base-color 51%)));
    @include button-highlight-shadow($first-color);
    border: 1px solid darken($second-color, 5%);
    @if $auto-states {
        @include pseudo-states($first-color, $second-color, $style);
    }
  }
  // Simple Gradient Style
  @if $style == "simple" {
    @if $second-color == false {
        $second-color: darken($base-color, 10%);
    }
    @include background(linear-gradient(color-stops($base-color, $second-color)));
    @include button-highlight-shadow($first-color);
    border: 1px solid darken($second-color, 5%);
    @if $auto-states {
        @include pseudo-states($base-color, $second-color, $style);
    }
  }
  // Flat Style
  @if $style == "flat" {
    $second-color: $base-color;
    background-color: $base-color;
    border: 0;
    @if $auto-states {
        @include pseudo-states($base-color, false, $style);
    }
  }
  // Apply Text Styles
  @if $text-style {
    @include button-text-style($first-color, $second-color, $text-color, $text-style);
  }
}

// Mixin for some optional styles on sassy buttons
@mixin button-style($style, $base-color: $btn-base-color) {
    @if $style == "push" {
        position: relative;
        @include box-shadow(darken($base-color, 12%) 0 0.4em 0px, lighten($base-color, 18%) 0 1px 0 inset);
        border-bottom: solid 1px $base-color;
        &:active {
            top: 0.3em;
            @include box-shadow(darken($base-color, 8%) 0 0.2em 0px);
        }
    }
    @if $style == "inset" {
        @include box-shadow(darken($base-color, 8%) 0 0.2em 0.4em inset);
        border: solid 1px darken($base-color, 15%);
        &:active {
            @include box-shadow(darken($base-color, 12%) 0 0.2em 0.4em inset);
        }
    }
}


// Mixin that generates :hover, :active, and disabled pseudo states
@mixin pseudo-states($first-color, $second-color, $style) {
    @include button-hover($first-color, $second-color, $style);
    &.disabled, &[disabled] {
        @include opacity(0.6);
        background: $second-color;
        cursor: default;
        @include box-shadow(none);
    }
}

@mixin button-hover($first-color, $second-color, $style) {
    &:hover {
        text-decoration: none;
    }
    @if $style == "matte" {
        &:hover {
            background-color: darken($second-color, 5%);
            @include background(linear-gradient(color-stops(darken($first-color, 5%) 3%, darken($second-color, 5%) 75%)));
        }
        &:active {
            @include button-active-shadow($second-color);
        }
    }
    @if $style == "shiny" {
        &:hover {
            background-color: $second-color;
            @include background(linear-gradient(color-stops(darken($first-color, 2%), $second-color 50%, darken($second-color, 8%))));
        }
        &:active {
            @include button-active-shadow($second-color);
        }
    }
    @if $style == "glass" {
        &:hover {
            background-color: darken($second-color, 7%);
            @include background(linear-gradient(color-stops(darken($first-color, 7%) 50%, darken($second-color, 7%) 51%)));
        }
        &:active {
            @include button-active-shadow($second-color);
        }
    }
    @if $style == "simple" {
        &:hover {
            background-color: darken($second-color, 5%);
            @include background(linear-gradient(color-stops(darken($first-color, 5%), darken($second-color, 5%))));
        }
        &:active {
            @include button-active-shadow($second-color);
        }
    }
    @if $style == "flat" {
        &:hover {
            background-color: darken($first-color, 5%);
        }
        &:active {
            background-color: darken($first-color, 8%);
        }
    }
}



//
// LEGACY MIXINS
// --------------------------------------------------

// Inline Block
@mixin legacy-inline-block($alignment: $inline-block-alignment) {
    @if $legacy-support-for-mozilla {
        display: -moz-inline-stack;
    }
        display: inline-block;
    @if $alignment and $alignment != none {
        vertical-align: $alignment;
    }
    @if $legacy-support-for-ie {
        *vertical-align: auto;
        zoom: 1;
        *display: inline;
    }
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin legacy-restore-left-whitespace() {
    *margin-left: .3em;

    &:first-child {
        *margin-left: 0;
    }
}

@mixin legacy-restore-right-whitespace() {
    *margin-right: .3em;
}

// Reset filters for IE
@mixin legacy-reset-filter() {
  filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);
}


//
// MEDIA QUERIES MIXINS
// --------------------------------------------------

@mixin respond-to($media-query) {

    @if $media-query == tvscreen {
        @media (min-width: $tvscreen) { @content; }
    }

    @if $media-query == tablet {
        @media (min-width: $tablet) and  (max-width: $desktop) { @content; }
    }

    @if $media-query == mobile {
        @media (max-width:$mobile) { @content; }
    }

}


//
// UTILITY MIXINS
// --------------------------------------------------


// Webkit-style focus
// ------------------
@mixin tab-focus() {
    // Default
    outline: thin dotted #333;
    // Webkit
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}


// Center-align a block level element
// ----------------------------------
@mixin center-block() {
    float: none;
    display: block;
    margin-left: auto;
    margin-right: auto;
}


// Font Size
// -------------------------
@mixin relative-font-size($base-font-size: 1.6, $line-height: true){
    font-size: ($base-font-size * 1) + px;
    font-size: ($base-font-size / 10 * 0.625) + rem;
    @if $line-height == true {
        line-height: ($base-font-size * 1) + px;
        line-height: ($base-font-size / 10 * 0.625) + rem;
    }
}


// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
@mixin text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}


// CSS image replacement
// -------------------------
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
@mixin hide-text() {
    font: 0/0 a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
}


// Optimize Font
// -------------------------
@mixin optimize-font() {
    font-smooth: always;
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
}


// Image Rendering
// -------------------------
@mixin image-rendering($mode:optimizeQuality) {

  @if $mode == "optimize-contrast" {
      image-rendering: -moz-crisp-edges;
      image-rendering: -o-crisp-edges;
      image-rendering: -webkit-optimize-contrast;
      image-rendering: optimize-contrast;
  }

  @else {
      image-rendering: $mode;
  }
}


// Font Face
// -------------------------
// Order of the includes matters, and it is: normal, bold, italic, bold+italic.
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal, $asset-pipeline: false ) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    @if $asset-pipeline == true {
      src: font-url('#{$file-path}.eot');
      src: font-url('#{$file-path}.eot?#iefix')          format('embedded-opentype'),
           font-url('#{$file-path}.woff')                format('woff'),
           font-url('#{$file-path}.ttf')                 format('truetype'),
           font-url('#{$file-path}.svg##{$font-family}') format('svg');
    } @else {
      src: url('#{$file-path}.eot');
      src: url('#{$file-path}.eot?#iefix')               format('embedded-opentype'),
           url('#{$file-path}.woff')                     format('woff'),
           url('#{$file-path}.ttf')                      format('truetype'),
           url('#{$file-path}.svg##{$font-family}')      format('svg');
    }
  }
}


// Sprites (with retina)
// -------------------------
@mixin retina-sprite($name, $hover: false, $active: false) {
  @include _retina-sprite($name, $sprites, $sprites2x, $hover, $active);
}

// The general purpose retina sprite mixin.
  //
  //    @include retina-sprite(name, $spritemap1, $spritemap2)
  //    @include retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $pad: 0])
  //
  //    If `dimensions` is true, then width/height will also be set.
  //
  //    if `pad` is non-zero, then that's how much padding the element will have (requires
  //    $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
  //
@mixin _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions: true, $pad: 0) {
  @if $dimensions == true {
    @include sprite-dimensions($sprites, $name);
  }
  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $name, -$pad, -$pad);
  background-repeat: no-repeat;

  @if $hover == true {
    $name_hover: $name + _hover;
    &:hover {
      background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
    }
  }
  @if $active == true {
    $name_active: $name + _active;
    &:active {
      background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
    }
  }

  @if $pad > 0 {
    padding: $pad;
  }

  @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
    & {
      $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2);
      background-image: sprite-url($sprites2x);
      background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
      @include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);
      //  sprite-path() returns the path of the generated sprite sheet, which
      //  image-width() calculates the width of. the ceil() is in place in case
      //  you have sprites that have an odd-number of pixels in width

      @if $hover == true {
        $name_hover: $name + _hover;    // create myButton_hover and assign it
        &:hover{
          $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
        }
      }
      @if $active == true {
        $name_active: $name + _active;    // create myButton_active and assign it
        &:active{
          $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
        }
      }
    }
  }
}


// Animation
// -------------------------
@mixin keyframes($name) {
    @-webkit-keyframes $name {
        0%  { top: 10px; }
        50% { top: 0px; }
        100% { top: 10px; }
    }
    @-moz-keyframes $name {
        0%  { top: 10px; }
        50% { top: 0px; }
        100% { top: 10px; }
    }
    @-o-keyframes $name {
        0%  { top: 10px; }
        50% { top: 0px; }
        100% { top: 10px; }
    }
    @keyframes $name {
        0%  { top: 10px; }
        50% { top: 0px; }
        100% { top: 10px; }
    }
}

@mixin animation($name, $duration) {

    -webkit-animation: $name $duration infinite; /* Safari 4+ */
    -moz-animation:    $name $duration infinite; /* Fx 5+ */
    -o-animation:      $name $duration infinite; /* Opera 12+ */
    animation:         $name $duration infinite; /* IE 10+ */

}
